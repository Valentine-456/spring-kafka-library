version: '2.1'

services:
  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    platform: linux/amd64
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    networks:
      - backend


  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    platform: linux/amd64
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://kafka1:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    depends_on:
      - zoo1
    networks:
      - backend

  kafka2:
    image: confluentinc/cp-kafka:7.3.2
    platform: linux/amd64
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19093,EXTERNAL://kafka2:9093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    depends_on:
      - zoo1
    networks:
      - backend


  kafka3:
    image: confluentinc/cp-kafka:7.3.2
    platform: linux/amd64
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:19094,EXTERNAL://kafka3:9094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    depends_on:
      - zoo1
    networks:
      - backend

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 9000:8080
    depends_on:
      - zoo1
      - kafka1
      - kafka2
      - kafka3
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka-ui
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9093,kafka3:9094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zoo1:2181
    networks:
      - backend

  postgres1:
    image: postgres:14-alpine
    hostname: postgres1
    container_name: postgres1
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=secret
      - POSTGRES_USER=consumer_user
      - POSTGRES_DB=consumer_db
    networks:
      - backend
  
  library-consumer:
    build:
      context: ./library-consumer  
      dockerfile: Dockerfile  
    ports:
      - "8081:8081"  
    depends_on:
      - postgres1
      - kafka1
      - kafka2
      - kafka3
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres1:5432/consumer_db
      - SPRING_DATASOURCE_USERNAME=consumer_user
      - SPRING_DATASOURCE_PASSWORD=secret
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
 
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend

  library-producer:
    build:
      context: ./library-producer  
      dockerfile: Dockerfile  
    ports:
      - "8080:8080"  
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
 
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - backend



volumes:
  postgres-data:

networks:
  backend:
